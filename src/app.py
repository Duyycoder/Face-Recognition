import streamlit as st
import requests
import cv2
import os
import json
import time
import threading
import numpy as np
from PIL import Image
from io import BytesIO

from common.settings import Settings
from common.utils import (
    save_embedding,
    load_embeddings,
    cosine_similarity,
)

settings = Settings()

EMBEDDING_PATH = "F:\D\\NCKH_24-25\Face-Recognition\data\embedding.json"

# Ensure folders exist
if not os.path.exists(EMBEDDING_PATH):
    with open(EMBEDDING_PATH, "w") as f:
        json.dump([], f)

def get_face_detect(image):
    _, buffer = cv2.imencode('.jpg', image)
    file_bytes = BytesIO(buffer.tobytes())
    file_bytes.name = 'image.jpg'
    files = {'file': (file_bytes.name, file_bytes, 'image/jpeg')}
    response = requests.post(str(settings.host_detector), files=files)
    if response.status_code == 200:
        return {
            "bbox": response.json()['info']['bboxes'],
            "landmarks": response.json()['info']['landmarks']
        }
    return None

def get_face_embedding(image, kpps):
    payload = {
        'image': image.tolist(),
        'landmarks': np.array(kpps[0]).tolist(),
    }
    response = requests.post(str(settings.host_embedding), json=payload)
    if response.status_code != 200:
        print("Error:", response.text)
        return None
    return response.json()['info']["face_embedding"]

# Streamlit UI
st.title("üßë‚Äçüíª Face Registration & Recognition")

# Theo d√µi tab hi·ªán t·∫°i
if 'active_tab' not in st.session_state:
    st.session_state.active_tab = "ƒêƒÉng k√Ω khu√¥n m·∫∑t"  # Tab m·∫∑c ƒë·ªãnh

tab1, tab2 = st.tabs(["üì• ƒêƒÉng k√Ω khu√¥n m·∫∑t", "üì∏ Check-in"])

# C·∫≠p nh·∫≠t tab hi·ªán t·∫°i
with tab1:
    st.session_state.active_tab = "ƒêƒÉng k√Ω khu√¥n m·∫∑t"

with tab2:
    st.session_state.active_tab = "Check-in"

# --- ƒêƒÇNG K√ù ---
with tab1:
    name = st.text_input("Nh·∫≠p t√™n ng∆∞·ªùi d√πng")
    st.markdown("### üì§ Ch·ªçn ·∫£nh")
    uploaded_file = st.file_uploader("T·∫£i ·∫£nh khu√¥n m·∫∑t l√™n", type=["jpg", "jpeg", "png"])
    upload_btn = st.button("ƒêƒÉng k√Ω")

    def handle_registration(image_np, source="webcam"):
        if name.strip() == "":
            st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p t√™n.")
            return

        # G·ªçi API detect khu√¥n m·∫∑t
        with st.spinner("ƒêang x·ª≠ l√Ω ·∫£nh v√† ƒëƒÉng k√Ω..."):
            face_info = get_face_detect(image=image_np)
            if face_info is None or not face_info.get("bbox"):
                st.error("‚ùå Kh√¥ng ph√°t hi·ªán khu√¥n m·∫∑t.")
                return

        # G·ªçi API embedding
        emb = get_face_embedding(image=image_np, kpps=face_info["landmarks"])
        if emb:
            save_embedding(name, emb, EMBEDDING_PATH)
            st.success(f"‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng t·ª´ {source}!")
        else:
            st.error("‚ùå Kh√¥ng th·ªÉ t·∫°o embedding.")

    if upload_btn:
        if uploaded_file is not None:
            image = Image.open(uploaded_file).convert("RGB")
            image_np = np.array(image)
            image_np = cv2.cvtColor(image_np, cv2.COLOR_RGB2BGR)
            handle_registration(image_np, source="upload")
        else:
            st.warning("‚ö†Ô∏è Vui l√≤ng t·∫£i l√™n m·ªôt ·∫£nh.")

with tab2:
    st.subheader("üì∏ Camera Check-in")
    placeholder = st.empty()
    result_placeholder = st.empty()

    # M·ªü camera khi v√†o tab2
    if st.session_state.active_tab == "Check-in":
        if 'cap' not in st.session_state or not st.session_state.cap.isOpened():
            st.session_state.cap = cv2.VideoCapture(0)
            st.session_state.cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
            st.session_state.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

    # T·∫Øt camera khi r·ªùi tab2
    if st.session_state.active_tab != "Check-in":
        if 'cap' in st.session_state and st.session_state.cap.isOpened():
            st.session_state.cap.release()
        st.session_state.pop('cap', None)

    # Nh·∫•n nh·∫≠n di·ªán s·∫Ω g√°n c·ªù ƒë·ªÉ x·ª≠ l√Ω ri√™ng 1 frame
    if 'recognize_flag' not in st.session_state:
        st.session_state.recognize_flag = False

    if st.button("Nh·∫≠n di·ªán"):
        st.session_state.recognize_flag = True

    # Cam live loop (ch·ªâ khi ·ªü tab Check-in)
    cap = st.session_state.get("cap", None)
    if cap and cap.isOpened() and st.session_state.active_tab == "Check-in":
        while True:
            ret, frame = cap.read()
            if not ret:
                st.error("Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c frame t·ª´ webcam.")
                break

            frame = cv2.flip(frame, 1)
            placeholder.image(frame, channels="BGR", use_container_width=True)

            # N·∫øu nh·∫•n n√∫t nh·∫≠n di·ªán th√¨ x·ª≠ l√Ω frame ƒë√≥
            if st.session_state.recognize_flag:
                face_info = get_face_detect(image=frame)
                if face_info and face_info.get("bbox"):
                    emb = get_face_embedding(image=frame, kpps=face_info["landmarks"])
                    if emb:
                        data = load_embeddings(embedding_path=EMBEDDING_PATH)
                        if not data:
                            result_placeholder.warning("‚ö†Ô∏è Ch∆∞a c√≥ ai ƒë∆∞·ª£c ƒëƒÉng k√Ω.")
                        else:
                            scores = [(person["name"], cosine_similarity(emb, person["embedding"])) for person in data]
                            scores = sorted(scores, key=lambda x: x[1], reverse=True)
                            best_name, best_score = scores[0]
                            if best_score > 0.4:
                                result_placeholder.success(f"‚úÖ **{best_name}** (score: {best_score:.2f})")
                            else:
                                result_placeholder.warning(f"‚ö†Ô∏è Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c (score: {best_score:.2f})")
                    else:
                        result_placeholder.error("‚ùå Kh√¥ng th·ªÉ t·∫°o embedding.")
                else:
                    result_placeholder.error("‚ùå Kh√¥ng ph√°t hi·ªán khu√¥n m·∫∑t.")
                # Reset flag sau khi x·ª≠ l√Ω
                st.session_state.recognize_flag = False

            # D·ª´ng 0.05s ƒë·ªÉ c·∫≠p nh·∫≠t frame m·ªõi (loop gi·∫£)
            time.sleep(0.05)

            # ƒêi·ªÅu ki·ªán d·ª´ng v√≤ng l·∫∑p n·∫øu r·ªùi tab
            if st.session_state.active_tab != "Check-in":
                break
